<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Ming]]></title>
  <link href="http://feitian124.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://feitian124.github.com/"/>
  <updated>2012-08-09T21:53:26+08:00</updated>
  <id>http://feitian124.github.com/</id>
  <author>
    <name><![CDATA[ming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[my first gem]]></title>
    <link href="http://feitian124.github.com/blog/2012/07/my-first-gem.html"/>
    <updated>2012-07-11T23:11:00+08:00</updated>
    <id>http://feitian124.github.com/blog/2012/07/my-first-gem</id>
    <content type="html"><![CDATA[<p>学了大半年的rails，却还没写过自己到gem，我这个吉他新手，还老需要去翻教材，找一些和弦是如何按的，
于是我决定写一个简单的gem，用来查找这些和弦。思路：</p>

<!-- more -->


<ol>
<li>将常用和弦以yaml的形式存到文件中</li>
<li>设计一个简单的和弦类，它的<code>to_s</code>方法显示改和弦，像这样
```
am
|--0--|-----|-----|-----|-----|
|-----|--1--|-----|-----|-----|
|-----|-----|--3--|-----|-----|
|-----|-----|--2--|-----|-----|
|--0--|-----|-----|-----|-----|
|--0--|-----|-----|-----|-----|</li>
</ol>


<p>```
 3.  用rake显示多个或指定和弦</p>

<p>我们可以用bundle来新建一个gem，他会替我们生成一个骨架<code>bundle gem guitar_chords</code>.<br/>
我的gem是下面这个样子
```
$ tree
.
├── Gemfile
├── Gemfile.lock
├── guitar_chords.gemspec
├── lib
│   ├── guitar_chords
│   │   ├── guitar_chord.rb
│   │   ├── guitar_chords.yml
│   │   └── version.rb
│   └── guitar_chords.rb
├── LICENSE
├── Rakefile
├── README.md
└── spec</p>

<pre><code>├── guitar_chords_spec.rb
└── spec_helper.rb
</code></pre>

<p><code>``
我尝试用SPEC进行TDD，虽然才写了几个test case，却也能在重构时帮我快速找出不少问题。  
配置spec时，碰到一些依赖方面的问题，对于module，require之后才能include。然后路径
的问题，特别是相对路径，如果你在</code>guitar_chord.rb<code>中写</code>guitar_chords/guitar_chords.yml<code>的
话，不一定能找到，因为当前目录是你调用</code>spec<code>时所在的目录，并不是</code>guitar_chord.rb`的目录。
然后慢慢去翻书，找别人的代码参考，终于实现了个大概。</p>

<p>TODO：<br/>
 1. rake部分<br/>
 2. 用单例模式，在第一次加载<code>guitar_chords.rb</code>时load所有的和弦对象。<br/>
你可以查看源码，见<a href="https://github.com/feitian124/guitar_chords">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails guide学习笔记1]]></title>
    <link href="http://feitian124.github.com/blog/2012/03/rails-guidexue-xi-bi-ji-1.html"/>
    <updated>2012-03-03T23:55:00+08:00</updated>
    <id>http://feitian124.github.com/blog/2012/03/rails-guidexue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<p>学习rails也有2，3个星期了。虽然有javaEE的使用经验，也较系统的提前学习了ruby，
不得不说学习起来还是有不少的难度。简单来说，ruby on raisl就相当于java中的
struts＋spring＋habinate，再加一个非常方便的代码生成工具。</p>

<!-- more -->


<p>同时，也建议初学者直接从RailsGuides官方文档作为学习的第一站，因为这里有对rails
方方面面的介绍，从怎么做到为什么这么做。以我为例，我学的第一本教材是那本著名的
《用rails进行敏捷开发》第4版（Agile Web Development），但由于没有一点概念，书中
说用rails new，generate，scaffold等时不知道他是想干什么，为什么他要这么做，只能跟
着书一步一步作，学习效果并不理想, 所有我只有fall back来看官方文档。也见解印证了我
的那个观点：官方文档永远是值得考虑认真学习的文档。</p>

<p>今天基本看完教材上model的部分,终于也能在学习中体验到爽的感觉。聪明的migrations,
聪明的验证和回调，聪明的实体关联，聪明的查询接口。ror的开发理念让很多东西都聪明起来，
当然，里面也有很多你一不注意就会犯错的小陷阱。比如哪些方法会触发回调，低性能的N＋1查
询问题等。我要在理解的基础上记忆的同时，增加实战经验。</p>
]]></content>
  </entry>
  
</feed>
